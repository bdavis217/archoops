# ArcHoops Development Rules
# Empowering the next generation of diverse STEM leaders through sports analytics

project_info:
  name: "ArcHoops"
  vision: "Empowering the next generation of diverse STEM leaders through sports analytics"
  mission: "Transforming kids' enthusiasm for sports into a powerful tool for learning about data science"
  version: "MVP 1.0"

# Core Development Principles
principles:
  - "Cost-conscious development with easy scalability"
  - "Mock-first approach with seamless API integration"
  - "Mobile-first responsive design"
  - "Modular, maintainable, and testable code"
  - "Educational UX focused on middle school students"

# Technology Stack
tech_stack:
  frontend:
    framework: "React 18+"
    styling: "Tailwind CSS"
    state_management: "React Context + useReducer"
    routing: "React Router v6"
    forms: "React Hook Form + Zod validation"
    ui_components: "Headless UI or Radix UI"
    icons: "Lucide React"
    charts: "Recharts or Chart.js"
  
  backend:
    runtime: "Node.js with Express"
    database: "SQLite (development) -> PostgreSQL (production)"
    orm: "Prisma"
    auth: "JWT with bcrypt"
    file_upload: "Multer"
    api_docs: "Swagger/OpenAPI"
  
  development:
    package_manager: "npm"
    linting: "ESLint + Prettier"
    testing: "Jest + React Testing Library"
    bundler: "Vite"

# Project Structure
project_structure: |
  src/
  ├── components/
  │   ├── ui/                 # Reusable UI components
  │   ├── forms/              # Form components
  │   ├── layout/             # Layout components
  │   └── features/           # Feature-specific components
  ├── pages/                  # Route components
  ├── hooks/                  # Custom React hooks
  ├── services/              # API services and data fetching
  ├── utils/                 # Utility functions
  ├── types/                 # TypeScript type definitions
  ├── contexts/              # React contexts
  ├── constants/             # Application constants
  └── assets/                # Static assets
  
  server/
  ├── routes/                # API routes
  ├── middleware/            # Express middleware
  ├── models/               # Database models
  ├── services/             # Business logic
  ├── utils/                # Server utilities
  ├── config/               # Configuration files
  └── prisma/               # Database schema and migrations

# Coding Standards
coding_standards:
  general:
    - "Use TypeScript for type safety"
    - "Follow functional programming patterns where possible"
    - "Use semantic HTML and accessible components"
    - "Implement proper error handling and loading states"
    - "Write descriptive commit messages using conventional commits"
  
  react:
    - "Use functional components with hooks"
    - "Prefer custom hooks for reusable logic"
    - "Use React.memo for performance optimization when needed"
    - "Keep components small and focused (single responsibility)"
    - "Use proper prop types and default props"
  
  react_forms:
    - "Use useEffect to update form state when props change (not just initial values)"
    - "For update forms: pass isUpdate prop to distinguish create vs update behavior"
    - "Conditional data structure: exclude fields for updates that belong in URL path"
    - "Reset form state to defaults when switching from update to create mode"
    - "Always validate that existing data populates correctly in update forms"
  
  api_design:
    - "RESTful API design principles"
    - "Consistent error response format"
    - "Proper HTTP status codes"
    - "Input validation on all endpoints"
    - "Rate limiting for public endpoints"
  
  api_validation:
    - "Use separate Zod schemas for Create vs Update operations"
    - "Update schemas should omit fields that are in URL path (e.g., gameId)"
    - "CreateSchema includes all required fields, UpdateSchema uses .partial()"
    - "Frontend must match schema expectations: include gameId for POST, exclude for PUT"
    - "Always check schema definitions before implementing CRUD operations"

# File Naming Conventions
naming_conventions:
  components: "PascalCase (UserProfile.tsx)"
  hooks: "camelCase starting with 'use' (useGamePrediction.ts)"
  utilities: "camelCase (formatScore.ts)"
  constants: "UPPER_SNAKE_CASE (API_ENDPOINTS.ts)"
  types: "PascalCase with descriptive names (GamePrediction.ts)"

# Data Management
data_management:
  mock_data:
    - "Create realistic mock data that matches NBA API structure"
    - "Use JSON files for static mock data"
    - "Implement mock service layer that mimics real API responses"
    - "Include data for different seasons and scenarios"
  
  api_integration:
    - "Abstract API calls behind service layer"
    - "Use environment variables for API configuration"
    - "Implement retry logic and error handling"
    - "Cache frequently accessed data appropriately"
  
  database:
    - "Use Prisma for type-safe database operations"
    - "Implement proper relations between entities"
    - "Use database transactions for data integrity"
    - "Plan for easy migration from SQLite to PostgreSQL"
    
  user_data_deletion:
    - "CRITICAL: When adding new models/tables that reference User, ALWAYS update the delete account endpoint"
    - "Location: apps/api/src/routes/profile.ts - DELETE /profile/delete-account endpoint"
    - "Add deletion logic in the transaction before the user.delete() call"
    - "Consider cascading effects: if users create data that other users depend on, handle appropriately"
    - "Order matters: delete dependent records before parent records to avoid foreign key constraints"
    - "Test deletion thoroughly to ensure no orphaned data remains"

# Security Guidelines
security:
  - "Sanitize all user inputs"
  - "Use HTTPS in production"
  - "Implement proper CORS policies"
  - "Store passwords using bcrypt"
  - "Use JWT tokens with appropriate expiration"
  - "Validate all API inputs with Zod schemas"
  - "Implement rate limiting"

# Performance Guidelines
performance:
  - "Lazy load routes and heavy components"
  - "Optimize images and assets"
  - "Use React.memo and useMemo appropriately"
  - "Implement efficient data fetching patterns"
  - "Use virtual scrolling for large lists"
  - "Minimize bundle size with tree shaking"

# Testing Strategy
testing:
  unit_tests:
    - "Test utility functions and custom hooks"
    - "Test component logic and user interactions"
    - "Mock external dependencies"
  
  integration_tests:
    - "Test API endpoints"
    - "Test database operations"
    - "Test authentication flows"
  
  e2e_tests:
    - "Test critical user journeys"
    - "Test responsive design on different devices"

# Accessibility
accessibility:
  - "Use semantic HTML elements"
  - "Implement proper ARIA labels"
  - "Ensure keyboard navigation works"
  - "Maintain proper color contrast ratios"
  - "Test with screen readers"
  - "Support reduced motion preferences"

# Environment Configuration
environments:
  development:
    database: "SQLite"
    api_base_url: "http://localhost:3001"
    log_level: "debug"
  
  production:
    database: "PostgreSQL"
    api_base_url: "TBD"
    log_level: "error"

# Key Features Implementation Notes
implementation_notes:
  authentication:
    - "Implement role-based access control (Teacher/Student)"
    - "Support multiple class memberships"
    - "Email-based registration with verification"
  
  predictions:
    - "Isolate scoring algorithm in dedicated service"
    - "Support real-time game updates"
    - "Implement leaderboard calculations"
  
  content_management:
    - "Support video lesson uploads"
    - "Implement lesson progress tracking"
    - "Create interactive lesson components"
  
  gamification:
    - "Point/coin system with configurable rules"
    - "Achievement and badge system"
    - "Social features for friendly competition"

# Development Workflow
workflow:
  feature_development:
    - "Create feature branch from main"
    - "Implement feature with tests"
    - "Update documentation"
    - "Create pull request with description"
    - "Code review and merge"
  
  commit_format: |
    feat: add new feature
    fix: bug fix
    docs: documentation changes
    style: formatting changes
    refactor: code refactoring
    test: adding tests
    chore: maintenance tasks

# Git and GitHub Rules
git_workflow:
  CRITICAL_RULES:
    - "NEVER commit or push to GitHub without explicit user permission"
    - "ALWAYS ask user before running git add, git commit, or git push commands"
    - "User must explicitly request 'save to github' or 'commit changes' before any git operations"
    - "When user requests saving changes, describe what will be committed before executing"
    - "Only stage and commit files that are directly related to the current task"
  
  allowed_git_operations_without_permission:
    - "git status (checking repository status)"
    - "git log (viewing commit history)"
    - "git diff (showing file differences)"
    - "git remote -v (checking remote configuration)"
    - "git branch (listing branches)"
  
  require_permission_for:
    - "git add (staging files)"
    - "git commit (creating commits)"
    - "git push (pushing to remote)"
    - "git pull (pulling from remote)"
    - "git merge (merging branches)"
    - "git rebase (rebasing branches)"
    - "git reset (resetting changes)"
  
  commit_workflow:
    - "When user requests saving changes:"
    - "1. Show what files will be added (git status)"
    - "2. Describe the proposed commit message"
    - "3. Ask for final confirmation before executing"
    - "4. Only proceed after explicit user approval"

# Common Pitfalls & Debugging
common_pitfalls:
  crud_operations:
    - "Validation Error 'Invalid data': Check if request body matches expected schema"
    - "Update operations failing: Verify URL path parameters aren't duplicated in body"
    - "Form not showing existing data: Use useEffect to update state when props change"
    - "Always check packages/types/src/schemas/ for current validation requirements"
  
  fastify_schema_validation:
    - "CRITICAL: Do NOT use Zod schemas directly in Fastify route schema definitions"
    - "Error 'data/required must be array': Remove schema validation or convert to JSON Schema"
    - "Fastify expects JSON Schema format, not Zod schemas in route.schema"
    - "Use TypeScript type assertions instead: request.params as { id: string }"
    - "Keep Zod for runtime validation in service layer, not route definitions"
    - "Remove schema: { params: z.object({...}) } from route handlers"
  
  authentication_errors:
    - "Cannot read properties of null (reading 'id'): Check request.user is populated"
    - "Verify fastify.authenticate middleware is working correctly"
    - "Ensure JWT token is being passed and decoded properly"
    - "Check if user object exists before accessing properties: request.user?.id"
    - "Add null checks in route handlers that depend on authenticated user"
  
  debugging_strategies:
    - "Add console.log for request payloads before API calls"
    - "Check browser Network tab for actual HTTP request/response"
    - "Verify Zod schema expectations vs frontend data structure"
    - "Test create vs update operations separately to isolate issues"
    - "Monitor API server logs for schema validation errors"
    - "Use npm run dev to see detailed error messages during development"
  
  example_patterns:
    prediction_updates: |
      // WRONG - includes gameId in update request
      const prediction = { gameId: game.id, predictionType, predictedWinner };
      
      // CORRECT - conditional inclusion based on operation type
      const prediction = {
        ...(isUpdate ? {} : { gameId: game.id }),
        predictionType,
        predictedWinner
      };

# Server Startup & Runtime Issues
server_troubleshooting:
  schema_validation_errors:
    - "FST_ERR_SCH_VALIDATION_BUILD: Remove Zod schemas from Fastify route definitions"
    - "data/required must be array: Convert to JSON Schema or remove schema validation"
    - "Check all route handlers for schema: { params/body/querystring } definitions"
    - "Use type assertions instead: request.params as { gameId: string }"
  
  port_conflicts:
    - "EADDRINUSE: Kill existing processes on port 3001/5173"
    - "Use netstat -ano | findstr :3001 to find processes using ports"
    - "Kill processes with taskkill /PID <pid> /F if needed"
    - "Restart development servers in correct order: API first, then frontend"
  
  authentication_runtime_errors:
    - "Cannot read properties of null (reading 'id'): Add request.user null checks"
    - "Verify JWT middleware is registered before protected routes"
    - "Check cookie parsing and JWT token extraction"
    - "Use optional chaining: request.user?.id instead of request.user.id"
  
  database_connection:
    - "Environment variable not found: DATABASE_URL: Set up .env file or env vars"
    - "Prisma client not generated: Run npx prisma generate"
    - "Database schema out of sync: Run npx prisma db push"

# Quick Reference - CRUD Operations
crud_checklist:
  before_implementing:
    - "Check packages/types/src/schemas/ for Create vs Update schema differences"
    - "Verify which fields are required vs optional for each operation"
    - "Understand which fields belong in URL path vs request body"
  
  frontend_implementation:
    - "Pass isUpdate prop to forms that handle both create and update"
    - "Use conditional field inclusion: ...(isUpdate ? {} : { gameId })"
    - "Implement useEffect to update form state when existingData prop changes"
    - "Test both create and update flows thoroughly"
  
  api_implementation:
    - "Use CreateSchema.partial().omit({ pathFields }) for UpdateSchema"
    - "Validate request body against appropriate schema (Create vs Update)"
    - "Ensure URL path parameters aren't duplicated in request body validation"
    - "NEVER use Zod schemas in Fastify route.schema - causes validation build errors"
    - "Always add null checks for request.user before accessing properties"
    - "Use TypeScript assertions: request.params as { id: string } instead of schema validation"

# Documentation Requirements
documentation:
  - "API documentation with Swagger"
  - "Component documentation with Storybook"
  - "README with setup instructions"
  - "Architecture decision records (ADRs)"
  - "User guide for teachers and students"

# Deployment Strategy
deployment:
  current: "Local development"
  future: "Cloud provider (Vercel/Netlify + Railway/Supabase)"
  considerations:
    - "Environment-based configuration"
    - "Database migration strategy"
    - "Asset optimization and CDN"
    - "Monitoring and error tracking"